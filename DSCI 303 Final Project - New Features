{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1vIW4DaArTT2wN8NkUqeiFs_JWHiTHaEw","timestamp":1669522645232}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Fadeel Khan, Caleb Huang, Matthew Su\n","## DSCI 303 HW 4 - Pre-Processing and Feature Engineering"],"metadata":{"id":"TYkw55913ZjT"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"UJ5oISQbtIjU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669525757903,"user_tz":360,"elapsed":21185,"user":{"displayName":"Fadeel Khan","userId":"12240165440314823873"}},"outputId":"f3b9daea-9566-4b4b-840d-4aa2c66625b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#Fadeel Khan, Caleb Huang, Matthew Su\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["# Data Pre-Processing to Usable Form\n","\n","We are including the mean, max and min values of each clinical trial. We intend to use the mean value as an indictor of the label. However, we are incorporating max and min to see if they have any correlation with the labels."],"metadata":{"id":"2aHr0EdU--N3"}},{"cell_type":"code","source":["def df_maker(testdf, type_domain):\n","  means = pd.DataFrame()\n","  maxes = pd.DataFrame()\n","  mins = pd.DataFrame()\n","  Jerk = pd.DataFrame()\n","\n","  #group all rows by label of activity\n","  test = testdf.groupby(['label'])\n","\n","  #add min and max values\n","  tester = test.mean()\n","  maxx = testdf.groupby(['label']).max()\n","  minn = testdf.groupby(['label']).min()\n","\n","  #drop time columns\n","  tester = tester.drop(columns = ['timestamp', 'rel_time'])\n","  maxx = maxx.drop(columns = ['timestamp', 'rel_time'])\n","  minn = minn.drop(columns = ['timestamp', 'rel_time'])\n","\n","  # Renaming\n","  if type_domain == 'freq':\n","    tester = tester.rename(columns={\"acc_x\": \"F_acc_x\", \"acc_y\": \"F_acc_y\", \"acc_z\": \"F_acc_z\", \"gyro_x\": \"F_gyro_x\", \"gyro_y\": \"F_gyro_y\", \"gyro_z\": \"F_gyro_z\", \"azimuth\": \"F_azimuth\", \"pitch\": \"F_pitch\", \"roll\": \"F_roll\"})\n","    maxx = maxx.rename(columns={\"acc_x\": \"Fmax_acc_x\", \"acc_y\": \"Fmax_acc_y\", \"acc_z\": \"Fmax_acc_z\", \"gyro_x\": \"Fmax_gyro_x\", \"gyro_y\": \"Fmax_gyro_y\", \"gyro_z\": \"Fmax_gyro_z\", \"azimuth\": \"Fmax_azimuth\", \"pitch\": \"Fmax_pitch\", \"roll\": \"Fmax_roll\"})\n","    minn = minn.rename(columns={\"acc_x\": \"Fmin_acc_x\", \"acc_y\": \"Fmin_acc_y\", \"acc_z\": \"Fmin_acc_z\", \"gyro_x\": \"Fmin_gyro_x\", \"gyro_y\": \"Fmin_gyro_y\", \"gyro_z\": \"Fmin_gyro_z\", \"azimuth\": \"Fmin_azimuth\", \"pitch\": \"Fmin_pitch\", \"roll\": \"Fmin_roll\"})\n","    \n","    # Jerk\n","    dt = testdf['rel_time'].iloc[-1]/len(testdf)\n","    avg_jerkk = tester/dt\n","    avg_jerkk = avg_jerkk.rename(columns={\"F_acc_x\": \"jerk_Facc_x\", \"F_acc_y\": \"jerk_Facc_y\", \"F_acc_z\": \"jerk_Facc_z\", \"F_gyro_x\": \"jerk_Fgyro_x\", \"F_gyro_y\": \"jerk_Fgyro_y\", \"F_gyro_z\": \"jerk_Fgyro_z\", \"F_azimuth\": \"jerk_Fazimuth\", \"F_pitch\": \"jerk_Fpitch\", \"F_roll\": \"jerk_Froll\"})\n","    avg_jerkk['F_JerkMagAcc'] = np.sqrt((avg_jerkk['jerk_Facc_x'])**2 + (avg_jerkk['jerk_Facc_y'])**2 + (avg_jerkk['jerk_Facc_z'])**2)\n","    avg_jerkk['F_JerkMagGyro'] = np.sqrt((avg_jerkk['jerk_Fgyro_x'])**2 + (avg_jerkk['jerk_Fgyro_y'])**2 + (avg_jerkk['jerk_Fgyro_z'])**2)\n","    avg_jerkk['F_JerkMagOrient'] = np.sqrt((avg_jerkk['jerk_Fazimuth'])**2 + (avg_jerkk['jerk_Fpitch'])**2 + (avg_jerkk['jerk_Froll'])**2)\n","\n","  else:\n","    maxx = maxx.rename(columns={\"acc_x\": \"max_acc_x\", \"acc_y\": \"max_acc_y\", \"acc_z\": \"max_acc_z\", \"gyro_x\": \"max_gyro_x\", \"gyro_y\": \"max_gyro_y\", \"gyro_z\": \"max_gyro_z\", \"azimuth\": \"max_azimuth\", \"pitch\": \"max_pitch\", \"roll\": \"max_roll\"})\n","    minn = minn.rename(columns={\"acc_x\": \"min_acc_x\", \"acc_y\": \"min_acc_y\", \"acc_z\": \"min_acc_z\", \"gyro_x\": \"min_gyro_x\", \"gyro_y\": \"min_gyro_y\", \"gyro_z\": \"min_gyro_z\", \"azimuth\": \"min_azimuth\", \"pitch\": \"min_pitch\", \"roll\": \"min_roll\"})\n","\n","    # Jerk\n","    dt = testdf['rel_time'].iloc[-1]/len(testdf)\n","    avg_jerkk = tester/dt\n","    avg_jerkk = avg_jerkk.rename(columns={\"acc_x\": \"jerk_acc_x\", \"acc_y\": \"jerk_acc_y\", \"acc_z\": \"jerk_acc_z\", \"gyro_x\": \"jerk_gyro_x\", \"gyro_y\": \"jerk_gyro_y\", \"gyro_z\": \"jerk_gyro_z\", \"azimuth\": \"jerk_azimuth\", \"pitch\": \"jerk_pitch\", \"roll\": \"jerk_roll\"})\n","    avg_jerkk['JerkMagAcc'] = np.sqrt((avg_jerkk['jerk_acc_x'])**2 + (avg_jerkk['jerk_acc_y'])**2 + (avg_jerkk['jerk_acc_z'])**2)\n","    avg_jerkk['JerkMagGyro'] = np.sqrt((avg_jerkk['jerk_gyro_x'])**2 + (avg_jerkk['jerk_gyro_y'])**2 + (avg_jerkk['jerk_gyro_z'])**2)\n","    avg_jerkk['JerkMagOrient'] = np.sqrt((avg_jerkk['jerk_azimuth'])**2 + (avg_jerkk['jerk_pitch'])**2 + (avg_jerkk['jerk_roll'])**2)\n","\n","\n","  #add aggregated data into master data frame\n","  means = means.append(tester)\n","  mins = mins.append(minn)\n","  maxes = maxes.append(maxx)\n","  Jerk = Jerk.append(avg_jerkk)\n","\n","  # Moving labels from index to a column\n","  means = means.reset_index(drop=False)\n","  maxes = maxes.reset_index(drop=False)\n","  mins = mins.reset_index(drop=False)\n","  Jerk = Jerk.reset_index(drop=False)\n","\n","  maxes = maxes.drop(columns = ['label'])\n","  mins = mins.drop(columns = ['label'])\n","  Jerk = Jerk.drop(columns = ['label'])\n","\n","  master = pd.concat([means,maxes,mins,Jerk], axis=1)\n","  return master"],"metadata":{"id":"QfaaXENFgak8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# import necessary libraries\n","import pandas as pd\n","import os\n","import glob\n","import numpy as np  \n","  \n","# use glob to get all the csv files \n","# in the folder\n","path = os.getcwd()\n","csv_files = glob.glob(os.path.join(path, \"*.csv\"))\n","\n","\n","#create list of all activity titles\n","activities = ['STD', 'WAL', 'JOG', 'JUM', 'STU', 'STN', 'SCH', 'SIT', 'CHU', 'CSI', 'CSO', 'FKL', 'FOL', 'BSC', 'SDL']\n","# activities = ['WAL']\n","master = pd.DataFrame()\n","inter = pd.DataFrame()\n","freq_inter = pd.DataFrame()\n","\n","for activity in activities: \n","  location = '/content/drive/Shareddrives/DSCI303' + '/' + activity\n","  standinglist = (os.listdir(location))\n","\n","  for i in standinglist:\n","    freqs_magnitude = pd.DataFrame()\n","    filepath = location + '/' + i\n","    #convert file in testdf\n","    main_df = pd.read_csv(filepath)\n","\n","    # Frequency Domain\n","    # This returns the fourier transform coeficients as complex numbers\n","    for idx in main_df.columns[:11]:\n","      transformed_y = np.fft.fft(main_df[idx])\n","      # Take the absolute value of the complex numbers for magnitude spectrum\n","      freqs_magnitude[idx] = np.abs(transformed_y)\n","\n","    freqs_magnitude['label'] = main_df['label']\n","\n","    # Apppending\n","    inter = inter.append(df_maker(main_df, 'time'))\n","    freq_inter = freq_inter.append(df_maker(freqs_magnitude, 'freq'))\n","    freq_inter = freq_inter.drop(columns = ['label'])\n","    \n","\n","master = pd.concat([inter,freq_inter], axis=1)"],"metadata":{"id":"bzaG5MrLwK9O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["master.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DEvRNV4ch7j5","executionInfo":{"status":"ok","timestamp":1669528026655,"user_tz":360,"elapsed":9,"user":{"displayName":"Fadeel Khan","userId":"12240165440314823873"}},"outputId":"9354a588-a9d7-4b2a-df78-df56cc920dff"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['label', 'acc_x', 'acc_y', 'acc_z', 'gyro_x', 'gyro_y', 'gyro_z',\n","       'azimuth', 'pitch', 'roll', 'max_acc_x', 'max_acc_y', 'max_acc_z',\n","       'max_gyro_x', 'max_gyro_y', 'max_gyro_z', 'max_azimuth', 'max_pitch',\n","       'max_roll', 'min_acc_x', 'min_acc_y', 'min_acc_z', 'min_gyro_x',\n","       'min_gyro_y', 'min_gyro_z', 'min_azimuth', 'min_pitch', 'min_roll',\n","       'jerk_acc_x', 'jerk_acc_y', 'jerk_acc_z', 'jerk_gyro_x', 'jerk_gyro_y',\n","       'jerk_gyro_z', 'jerk_azimuth', 'jerk_pitch', 'jerk_roll', 'JerkMagAcc',\n","       'JerkMagGyro', 'JerkMagOrient', 'F_acc_x', 'F_acc_y', 'F_acc_z',\n","       'F_gyro_x', 'F_gyro_y', 'F_gyro_z', 'F_azimuth', 'F_pitch', 'F_roll',\n","       'Fmax_acc_x', 'Fmax_acc_y', 'Fmax_acc_z', 'Fmax_gyro_x', 'Fmax_gyro_y',\n","       'Fmax_gyro_z', 'Fmax_azimuth', 'Fmax_pitch', 'Fmax_roll', 'Fmin_acc_x',\n","       'Fmin_acc_y', 'Fmin_acc_z', 'Fmin_gyro_x', 'Fmin_gyro_y', 'Fmin_gyro_z',\n","       'Fmin_azimuth', 'Fmin_pitch', 'Fmin_roll', 'jerk_Facc_x', 'jerk_Facc_y',\n","       'jerk_Facc_z', 'jerk_Fgyro_x', 'jerk_Fgyro_y', 'jerk_Fgyro_z',\n","       'jerk_Fazimuth', 'jerk_Fpitch', 'jerk_Froll', 'F_JerkMagAcc',\n","       'F_JerkMagGyro', 'F_JerkMagOrient'],\n","      dtype='object')"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["from pathlib import Path  \n","filepath = Path('/content/drive/Shareddrives/DSCI303/master_dataset.csv')  \n","filepath.parent.mkdir(parents=True, exist_ok=True)  \n","master.to_csv(filepath) "],"metadata":{"id":"KBRoYEhWlYMo"},"execution_count":null,"outputs":[]}]}